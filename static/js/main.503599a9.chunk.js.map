{"version":3,"sources":["Components/Circle/index.jsx","data/index.js","App.js","serviceWorker.js","index.js"],"names":["Circle","className","data","title","description","image","link","App","console","log","href","cite","src","alt","id","map","project","idx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQASeA,G,UANA,WACX,OACI,yBAAKC,UAAU,oBC4BRC,EAjCF,CACT,CACIC,MAAO,aACPC,YAAa,yJACbC,MAAO,4CACPC,KAAM,IAEV,CACIH,MAAO,eACPC,YAAa,2JACbC,MAAO,gDACPC,KAAM,IAEV,CACIH,MAAO,iBACPC,YAAa,uHACbC,MAAO,oDACPC,KAAM,IAEV,CACIH,MAAO,OACPC,YAAa,mLACbC,MAAO,gCACPC,KAAM,IAEV,CACIH,MAAO,iBACPC,YAAa,8IACbC,MAAO,oDACPC,KAAM,K,MCsDCC,MA5Ef,WAEE,OADAC,QAAQC,IAAIP,GAEV,oCACE,4BAAQD,UAAU,cAChB,yBAAKA,UAAU,cAEb,wBAAIA,UAAU,WACd,uBAAGS,KAAK,IAAKT,UAAU,YAAvB,oBACE,4BACE,uBAAGA,UAAU,WAAWS,KAAK,aAA7B,cAKJ,uBAAGA,KAAK,4BAA2B,kBAAC,EAAD,QAGrC,6BAAST,UAAU,uBACjB,6BAASA,UAAU,oBACjB,wDAGA,gCAAYU,KAAK,4DAEjB,sIAGA,kDAAkB,4DAGlB,mDAEqB,uBAAGV,UAAU,WAAWS,KAAK,2BAA7B,WAFrB,gGAQJ,6BAAST,UAAU,oBACjB,uBAAGS,KAAK,aAAY,yBAAKE,IAAI,4BAA4BC,IAAI,oBAGjE,0BAAMC,GAAG,WAAWb,UAAU,qBAC5B,yBAAMA,UAAU,uBAChB,wCACA,iEAAsC,uBAAGA,UAAU,WAAWS,KAAK,2BAA0B,yCAG3FR,EAAKa,KAAI,SAACC,EAASC,GAAV,OACT,6BAAShB,UAAU,oBACjB,yBAAKA,UAAU,0BACb,4BAAKe,EAAQb,OACb,2BAAIa,EAAQZ,cAEd,yBAAKH,UAAU,0BACb,yBAAKA,UAAU,0BAA0BW,IAAG,UAAKI,EAAQX,OAASQ,IAAI,0CCnDhEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.503599a9.chunk.js","sourcesContent":["import React from 'react'\nimport './circle.css'\n\nconst Circle = () => {\n    return ( \n        <div className=\"Circle-circle\"></div>\n     );\n}\n \nexport default Circle;\n","const data = [\n    {\n        title: 'Plant Life',\n        description: 'We go further with Javascript events by adding in click, mouseover and mouseout events, plus talking about how to add randomness into our design work.',\n        image: './assets/plant-life/assets/plant-life.png',\n        link: '',\n    },\n    {\n        title: 'Type Checker',\n        description: 'With Type Checker, we discuss how to work with form tags such as inputs, sliders, checkboxes and select boxes to build up interactivity to our projects.',\n        image: './assets/type-checker/assets/type-checker.png',\n        link: '',\n    },\n    {\n        title: 'Jenna Buchholz',\n        description: 'With this project, we go in depth into scroll events and parallax by adding progress bars, waypoints and thresholds.',\n        image: './assets/jenna-buchholz/assets/jenna-buchholz.png',\n        link: '',\n    },\n    {\n        title: 'Brux',\n        description: 'We extend our Javascript events knowledge by talking more about scroll and mouse movement events to add design elements such as fade on scroll and eyes that follow your cursor.',\n        image: './assets/brux/assets/brux.png',\n        link: '',\n    },\n    {\n        title: 'Words of Womxn',\n        description: 'We tie all of our learnings together by adding layers of Javascript to a project to take it from something static into a dynamic, fun site.',        \n        image: './assets/words-of-womxn/assets/words-of-womxn.png',\n        link: '',\n    },\n]\n\nexport default data","import React from 'react';\n\n\nimport {Circle} from './Components'\nimport data from './data'\nimport './App.css';\n\nfunction App() {\n  console.log(data)\n  return (\n    <>\n      <header className=\"App-header\">\n        <nav className=\"App-navbar\">\n          \n          <ul className=\"App-nav\">\n          <a href=\"/\"  className=\"App-link\">JS for Designers</a>\n            <li>\n              <a className=\"App-link\" href=\"#Projects\">Projects</a> \n            </li>\n  \n            \n          </ul>\n          <a href=\"https://www.gideonjr.com\"><Circle /></a>\n        </nav>\n      \n        <section className=\"App-header--content\">\n          <article className=\"App-header--text\">\n            <h1>\n            Javascript for Designers\n            </h1>\n            <blockquote cite=\"https://www.superhi.com/courses/javascript-for-designers\">\n\n            <p>\n            \"Javascript is one of the most used languages in the world but its learning curve is relatively steep.\" \n            </p> \n            <footer>â€“SuperHi, <cite>Javascript for Designers</cite></footer>\n            </blockquote>\n        \n            <p>\n          \n            In a short course by <a className=\"App-link\" href=\"https://www.superhi.com\">SuperHi</a>, I learned how to work with Javascript in a creative, fun way aimed at people who design.\n            \n            </p>\n          </article>\n         \n        </section>\n        <section className=\"App-header-arrow\">\n          <a href=\"#Projects\"><img src=\"./assets/chevron-down.svg\" alt=\"Chevron Down\"/></a>\n        </section>\n      </header>\n      <main id=\"Projects\" className=\"App-projects-list\">\n        <div  className=\"App-section-heading\">\n        <h2>Projects</h2>\n        <p>These projects were completed with <a className=\"App-link\" href=\"https://www.superhi.com\"><i>SuperHi</i></a></p>\n        </div>\n        {\n          data.map((project, idx) => (\n          <section className=\"App-project-card\">\n            <div className=\"App-project-card--text\">\n              <h3>{project.title}</h3>\n              <p>{project.description}</p>\n            </div>\n            <div className=\"App-project-card--item\">\n              <img className=\"App-project-card--image\" src={`${project.image}`} alt=\"Plant Life Project Screenshot\"/>\n            </div>\n          </section>\n          ))\n        }\n          \n         \n        </main>\n        {/* <footer>\n          <section>\n            <h4>\n              Credits\n            </h4>\n            <p>Hero illustration courtesy of SuperHi, colors updated by Gideon Ibemere, Jr</p>\n          </section>\n        </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}